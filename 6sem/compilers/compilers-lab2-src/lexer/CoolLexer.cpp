#line 2 "CoolLexer.cpp"

#line 4 "CoolLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CoolLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[483] =
    {   0,
       60,   60,    6,    6,   12,   12,   63,   61,   60,   59,
        9,   55,   56,   42,   44,   45,   39,   43,   35,   58,
       57,   48,   49,   40,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   51,   52,   38,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   53,
       54,   41,    6,    6,    5,    7,    6,    7,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,   12,   12,   10,   15,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   61,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   60,    3,    2,    0,   35,   50,   46,   47,
       37,   37,   37,   37,   37,   20,   21,   22,   37,   37,
       37,   37,   37,   33,   37,   37,   37,   38,   36,   36,
       36,   36,   36,   36,   20,   21,   22,   36,   36,   36,
       36,   36,   33,   36,   36,   36,   36,    6,    6,    4,
        8,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   14,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0,    1,
       37,   37,   37,   37,   37,   37,   25,   37,   32,   34,
       37,   37,   37,   36,   36,   36,   36,   36,   36,   36,

       25,   36,   32,   34,   36,   36,   36,   36,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   30,   37,   19,   31,   37,   37,
       26,   27,   28,   37,   30,   36,   19,   31,   36,   36,
       36,   26,   27,   28,   17,   36,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       16,   37,   37,   29,   16,   18,   36,   36,   29,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   37,   24,   36,
       24,    6,    6,    6,    6,   12,   12,   12,   12,   37,
       36,    6,    6,   12,   12,   23,   23,    6,    6,   12,
       12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   43,   48,   49,   43,   43,   50,   43,   51,
       52,   53,   43,   54,   55,   56,   57,   58,   59,   43,
       43,   43,   60,    1,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    5,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    3,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[496] =
    {   0,
        0,    0,   62,    0,  124,    0,  504, 2232,  185,  187,
     2232,  471, 2232,  434, 2232,  414, 2232, 2232,  179, 2232,
     2232,  184,  403, 2232,    0,  174,  167,  169,  174,  174,
      181,  172,  176,  182,  183, 2232, 2232,    0,    0,  195,
      206,  215,  207,  214,  217,  218,  216,  223,  222, 2232,
     2232, 2232,    0,  210,  248,  373,    0,  369,    0,    0,
        0,    0,  240,    0,    0,  250,  333,    0,  277,  339,
      256,  277,  382,  279,  340,  341,  280,  345,  377,    0,
        0,  437,  499,  561,  376,  386,  604,  437,  438,  444,
      392,  499,  500,    0,    0,    0,    0,  270,  272, 2232,

        0,    0,    0,    0,    0,    0,    0,  289,    0,    0,
      273,  326,    0,  659,  721,  501,  443,  764,  562,  563,
      600,  502,  568,  659,    0,  311,    0,  819,  881,  943,
      607,  661,  986,  606,  662,  722,  663,  725,  726,    0,
        0,    0,  310, 2232, 2232,  325,  321, 2232, 2232, 2232,
        0,  287,  304,  319,  342,    0,    0,  337,  336,  342,
      378,  422,  426,    0,  443,  450,  475,    0,    0,  478,
      503,  502,  516,  518,    0,    0,  547,  548,  551,  567,
      580,  597,    0,  611,  648,  645,  657,    0,  333, 2232,
     2232,  404,    0,    0,    0,  728,  757,  738,  767,  766,

      790,  803,  821,  826,  822,  873,  874,  884,  823,  936,
      824,  886, 1041,  889,  947,  927,  967,  948,  971,  988,
      990, 1041, 1026, 1043, 1044, 1045, 1072, 1070, 1077, 1089,
     1088, 1098,    0,  447,  631,    0,    0,    0, 1104, 1116,
     1113, 1123, 1122, 1132, 1133, 1142, 1149, 1159, 1166, 1139,
     1177, 1160, 1184, 1193, 1202, 2232, 2232, 2232, 1252, 1200,
     1244, 1245, 1255, 1254, 1256, 1261, 1265, 1296, 1281, 1298,
     1299, 1300, 1327, 1315, 1332, 1343, 1338, 1348,  315, 2232,
      671,  663,  709,  721,  767,  809,    0,  824,    0,    0,
      857,  876,  880,  886,  937,  948,  952,  946,  983,  982,

        0,  995,    0,    0, 1003, 1015, 1064, 1087, 1372, 1366,
     1381, 1382, 1383, 1400, 1415, 1416, 1417, 1418, 1420, 1435,
     1433, 1452, 1451, 1454, 1467, 1477, 1479, 1488, 1492, 1495,
     1494, 1511, 1513, 1523, 1526, 1529, 1536, 1542, 1557, 1567,
     1570, 1563, 1538, 1590, 1580, 1586, 1599, 1605, 1603, 1618,
     1624, 1630, 1639, 1642, 1645, 1658, 1643, 1670, 1674, 1676,
     1679, 1685, 1691, 1689,    0, 1170,    0,    0, 1191, 1197,
        0,    0,    0, 1232,    0, 1247,    0,    0, 1284, 1302,
     1364,    0,    0,    0,    0, 1388, 1702, 1712, 1714, 1718,
     1723, 1730, 1733, 1743, 1746, 1758, 1756, 1761, 1767, 1771,

     1777, 1782, 1798, 1787, 1792, 1802, 1811, 1821, 1815, 1818,
     1830, 1834, 1846, 1855, 1849, 1859, 1861, 1866, 1865, 1886,
     1882, 1893, 1898, 1897, 1903, 1914, 1918, 1929, 1930, 1935,
        0, 1390, 1396,    0,    0,    0, 1424, 1468,    0, 1934,
     1946, 1947, 1941, 1958, 1962, 1974, 1983, 1979, 1985, 1990,
     2014, 1994, 2010, 2021, 2023, 2025, 2026, 1513,    0, 1568,
        0, 2027, 2038, 2058, 2054, 2059, 2061, 2071, 2070, 1571,
     1596, 2074, 2090, 2097, 2108,    0,    0, 2106, 2115, 2118,
     2131, 2232,  275,  209,  205, 2181, 2186, 2191, 2196, 2201,
     2206, 2211, 2216, 2221, 2226

    } ;

static const flex_int16_t yy_def[496] =
    {   0,
      482,    1,  482,    3,  482,    5,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  482,  482,  484,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  482,
      482,  482,  486,  486,  482,  482,  486,  482,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  487,  487,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  486,
      486,  488,  489,  489,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  486,  486,  486,  490,  490,  482,  482,

      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  491,  491,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  490,  492,  490,  493,  494,  494,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  490,
      490,  490,  482,  482,  482,  495,  482,  482,  482,  482,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  486,  482,
      482,  486,  486,  486,  486,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,  488,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  490,  490,  490,  490,  490,  490,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  482,  482,  482,  493,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  495,  482,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      483,  483,  483,  483,  485,  485,  485,  485,  485,   70,
       70,   70,   70,   84,   84,   84,   84,   84,  115,  115,
      115,  115,  130,  130,  130,  130,  130,  483,  483,  485,
      485,   70,   70,   84,   84,  115,  115,  130,  130,  483,
      485,   70,   84,  115,  130,  483,  485,   70,   84,  115,
      130,    0,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482

    } ;

static const flex_int16_t yy_nxt[2295] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   19,   20,   21,   22,   23,    8,   24,   25,
       25,   26,   25,   27,   28,   25,   29,   30,   31,   32,
       33,   25,   25,   34,   25,   25,   35,   36,    8,   37,
       38,   39,   39,   40,   39,   41,   42,   39,   43,   44,
       45,   46,   47,   39,   39,   48,   39,   39,   49,   50,
       51,   52,   53,   54,   55,   53,   56,   57,   58,   59,
       60,   61,   62,   63,   63,   64,   65,   66,   67,   53,
       68,   69,   69,   70,   69,   71,   72,   69,   73,   74,
       75,   76,   77,   69,   69,   78,   69,   69,   79,   80,

       53,   81,   82,   83,   83,   84,   83,   85,   86,   83,
       87,   88,   89,   90,   91,   83,   83,   92,   83,   83,
       93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  108,  109,  110,  111,
      112,   97,  113,  114,  114,  115,  114,  116,  117,  114,
      118,  119,  120,  121,  122,  114,  114,  123,  114,  114,
      124,  125,  126,  127,  128,  129,  129,  130,  129,  131,
      132,  129,  133,  134,  135,  136,  137,  129,  129,  138,
      129,  129,  139,  140,  141,  142,  143,  143,  143,  143,
      147,  147,  148,  152,  154,  156,  164,  160,  157,  155,

      149,  153,  158,  161,  162,  165,  159,  166,  167,  169,
      163,  189,  143,  168,  170,  152,  154,  156,  164,  160,
      157,  155,  171,  153,  158,  161,  162,  165,  159,  166,
      167,  176,  163,  172,  174,  177,  170,  179,  173,  178,
      181,  175,  183,  180,  171,  184,  182,  187,  185,  143,
      143,  192,  192,  176,  186,  172,  174,  177,  193,  179,
      173,  178,  181,  175,  183,  180,  194,  184,  182,  187,
      185,  234,  143,  143,  143,  196,  186,  188,  188,  151,
      188,  236,  188,  199,  188,  188,  188,  188,  200,  237,
      188,  188,  188,  188,  188,  188,  196,  196,  196,  196,

      235,  235,  205,  201,  196,  199,  196,  196,  206,  210,
      200,  143,  143,  257,  188,  188,  188,  280,  196,  281,
      196,  196,  258,  282,  205,  201,  196,  280,  196,  196,
      206,  210,  147,  147,  189,  143,  188,  188,  188,  188,
      188,  281,  188,  238,  188,  282,  188,  188,  188,  188,
      195,  283,  188,  188,  188,  188,  188,  188,  197,  196,
      196,  284,  285,  207,  196,  209,  198,  196,  196,  208,
      211,  286,  196,  283,  191,  287,  188,  188,  188,  190,
      197,  196,  196,  284,  285,  207,  196,  209,  198,  196,
      196,  208,  211,  286,  196,  214,  196,  287,  188,  188,

      188,  196,  212,  217,  196,  219,  202,  288,  218,  196,
      203,  214,  220,  214,  204,  192,  192,  214,  196,  214,
      150,  229,  146,  196,  212,  217,  196,  219,  202,  288,
      218,  196,  203,  214,  220,  214,  204,  188,  188,  145,
      188,  214,  188,  229,  188,  188,  188,  188,  234,  143,
      188,  188,  188,  188,  188,  188,  214,  214,  289,  290,
      224,  226,  239,  214,  214,  214,  225,  227,  228,  244,
      239,  214,  291,  292,  188,  188,  188,  144,  214,  214,
      289,  290,  224,  226,  239,  214,  214,  214,  225,  227,
      228,  244,  239,  214,  291,  292,  188,  188,  188,  188,

      188,  293,  188,  482,  188,  482,  188,  188,  188,  188,
      294,  482,  188,  188,  188,  188,  188,  188,  214,  214,
      239,  239,  295,  293,  230,  232,  214,  214,  242,  239,
      231,  253,  294,  243,  296,  297,  188,  188,  188,  482,
      214,  214,  239,  239,  295,  298,  230,  232,  214,  214,
      242,  239,  231,  253,  482,  243,  296,  297,  188,  188,
      188,  188,  188,  482,  188,  482,  188,  298,  188,  188,
      188,  188,  299,  482,  188,  188,  188,  188,  188,  188,
      215,  239,  239,  300,  301,  248,  250,  239,  216,  239,
      239,  249,  251,  254,  299,  239,  302,  482,  188,  188,

      188,  482,  215,  239,  239,  300,  301,  248,  250,  239,
      216,  239,  239,  249,  251,  254,  303,  239,  302,  239,
      188,  188,  188,  214,  252,  260,  260,  239,  221,  270,
      304,  214,  222,  260,  263,  271,  223,  482,  303,  264,
      305,  239,  235,  235,  482,  214,  252,  260,  260,  239,
      221,  270,  304,  214,  222,  260,  263,  271,  223,  233,
      233,  264,  305,  233,  233,  233,  233,  233,  233,  233,
      482,  306,  233,  233,  233,  233,  233,  233,  239,  307,
      265,  260,  260,  308,  255,  272,  239,  266,  260,  260,
      260,  273,  275,  306,  365,  366,  233,  482,  233,  482,

      239,  307,  265,  260,  260,  308,  255,  272,  239,  266,
      260,  260,  260,  273,  275,  482,  365,  366,  233,  233,
      233,  233,  233,  482,  482,  233,  233,  233,  233,  233,
      233,  233,  367,  482,  233,  233,  233,  233,  233,  233,
      240,  260,  368,  482,  260,  260,  274,  196,  241,  260,
      276,  278,  260,  260,  367,  196,  277,  310,  233,  482,
      233,  482,  240,  260,  368,  196,  260,  260,  274,  196,
      241,  260,  276,  278,  260,  260,  196,  196,  277,  310,
      233,  233,  233,  239,  196,  312,  196,  196,  245,  309,
      369,  239,  246,  196,  196,  482,  247,  482,  196,  311,

      482,  482,  482,  482,  482,  239,  196,  312,  196,  196,
      245,  309,  369,  239,  246,  196,  196,  196,  247,  233,
      233,  311,  196,  233,  233,  233,  233,  233,  233,  233,
      196,  196,  233,  233,  233,  233,  233,  233,  370,  196,
      196,  196,  196,  196,  196,  196,  313,  320,  196,  196,
      196,  196,  196,  196,  371,  315,  233,  482,  233,  482,
      370,  314,  196,  196,  196,  196,  482,  196,  313,  320,
      196,  196,  196,  196,  482,  196,  371,  315,  233,  233,
      233,  233,  233,  314,  372,  233,  233,  233,  233,  233,
      233,  233,  196,  196,  233,  233,  233,  233,  233,  233,

      196,  196,  316,  196,  373,  196,  372,  374,  214,  375,
      317,  196,  321,  196,  196,  196,  214,  318,  233,  482,
      233,  482,  196,  196,  316,  196,  373,  196,  482,  374,
      214,  375,  317,  196,  321,  196,  482,  482,  214,  318,
      233,  233,  233,  233,  233,  482,  323,  233,  233,  233,
      233,  233,  233,  233,  214,  196,  233,  233,  233,  233,
      233,  233,  261,  196,  482,  319,  214,  325,  323,  376,
      262,  377,  482,  378,  214,  214,  214,  196,  379,  322,
      233,  482,  233,  482,  261,  196,  214,  319,  214,  325,
      214,  376,  262,  377,  214,  378,  214,  214,  326,  324,

      379,  322,  233,  233,  233,  260,  380,  214,  214,  214,
      267,  381,  214,  260,  268,  214,  214,  214,  269,  482,
      326,  324,  482,  482,  482,  382,  482,  260,  380,  214,
      383,  214,  267,  381,  482,  260,  268,  214,  482,  214,
      269,  188,  188,  384,  188,  214,  188,  382,  188,  188,
      188,  188,  383,  214,  188,  188,  188,  188,  188,  188,
      214,  328,  214,  214,  214,  384,  327,  214,  214,  482,
      214,  214,  214,  330,  482,  214,  329,  482,  188,  188,
      188,  331,  214,  328,  214,  214,  214,  385,  327,  214,
      214,  214,  214,  214,  214,  330,  214,  214,  329,  214,

      188,  188,  188,  331,  214,  332,  333,  214,  214,  385,
      482,  214,  334,  214,  386,  214,  214,  214,  214,  214,
      482,  214,  335,  239,  336,  214,  214,  332,  333,  214,
      214,  239,  338,  482,  334,  239,  386,  214,  214,  214,
      239,  340,  239,  239,  335,  239,  336,  214,  337,  239,
      239,  239,  239,  239,  338,  339,  482,  239,  239,  239,
      239,  239,  239,  340,  239,  239,  239,  341,  239,  239,
      337,  239,  239,  239,  239,  345,  239,  339,  239,  239,
      239,  239,  239,  239,  342,  239,  239,  239,  239,  341,
      239,  239,  343,  239,  482,  344,  239,  345,  239,  482,

      239,  239,  431,  239,  239,  482,  342,  239,  239,  239,
      346,  239,  239,  347,  343,  239,  348,  344,  239,  260,
      239,  239,  432,  433,  431,  239,  239,  260,  349,  239,
      482,  482,  346,  239,  239,  347,  482,  482,  348,  482,
      482,  260,  239,  239,  432,  433,  482,  482,  482,  260,
      349,  239,  233,  233,  482,  434,  233,  233,  233,  233,
      233,  233,  233,  260,  351,  233,  233,  233,  233,  233,
      233,  260,  260,  353,  260,  260,  350,  434,  482,  435,
      260,  260,  260,  354,  260,  260,  351,  352,  260,  233,
      482,  233,  260,  260,  260,  353,  260,  260,  350,  482,

      260,  435,  260,  260,  260,  354,  260,  436,  260,  352,
      260,  233,  233,  233,  260,  260,  356,  260,  260,  260,
      482,  355,  260,  260,  482,  260,  260,  260,  358,  436,
      260,  357,  482,  437,  260,  482,  359,  260,  356,  260,
      260,  260,  260,  355,  482,  260,  260,  260,  260,  260,
      358,  260,  482,  357,  260,  437,  260,  260,  359,  260,
      360,  361,  260,  482,  260,  260,  362,  260,  260,  482,
      260,  482,  363,  260,  364,  260,  260,  482,  482,  260,
      482,  260,  360,  361,  260,  196,  482,  260,  362,  260,
      438,  196,  260,  196,  363,  387,  364,  260,  388,  196,

      196,  196,  196,  390,  389,  482,  391,  196,  196,  196,
      196,  439,  438,  196,  482,  196,  458,  387,  459,  196,
      388,  196,  196,  196,  196,  390,  389,  196,  391,  392,
      196,  196,  196,  439,  196,  196,  196,  196,  458,  196,
      459,  196,  196,  196,  196,  196,  393,  394,  482,  196,
      460,  392,  196,  482,  196,  482,  196,  196,  196,  196,
      396,  196,  196,  395,  196,  196,  196,  196,  393,  394,
      214,  214,  460,  214,  196,  397,  196,  399,  214,  214,
      482,  214,  396,  398,  196,  395,  214,  482,  400,  482,
      461,  482,  214,  214,  214,  214,  214,  397,  214,  399,

      214,  214,  402,  214,  214,  398,  214,  214,  214,  401,
      400,  214,  461,  214,  214,  214,  214,  403,  214,  214,
      214,  214,  214,  482,  402,  404,  214,  482,  214,  214,
      214,  401,  214,  214,  482,  214,  214,  214,  214,  403,
      405,  214,  214,  214,  214,  214,  470,  404,  214,  407,
      214,  406,  214,  214,  214,  239,  408,  239,  482,  409,
      214,  239,  405,  239,  214,  239,  482,  214,  470,  239,
      214,  407,  214,  406,  410,  214,  239,  239,  408,  239,
      411,  409,  239,  239,  239,  239,  239,  239,  412,  239,
      239,  239,  414,  413,  239,  482,  410,  239,  239,  239,

      482,  471,  411,  476,  239,  239,  239,  239,  239,  239,
      412,  239,  239,  239,  414,  413,  239,  239,  239,  239,
      415,  239,  239,  471,  239,  476,  416,  239,  477,  239,
      418,  239,  239,  417,  482,  239,  482,  260,  482,  239,
      239,  419,  415,  260,  239,  260,  239,  482,  416,  260,
      477,  260,  418,  421,  239,  417,  420,  260,  260,  260,
      422,  260,  260,  419,  260,  260,  260,  260,  424,  260,
      260,  260,  260,  260,  423,  421,  482,  260,  420,  260,
      260,  482,  422,  260,  260,  260,  260,  425,  260,  260,
      424,  260,  260,  260,  260,  260,  423,  260,  260,  260,

      426,  260,  482,  260,  260,  482,  427,  260,  260,  425,
      260,  260,  260,  428,  429,  260,  430,  260,  260,  260,
      260,  196,  426,  260,  482,  260,  260,  482,  427,  196,
      260,  196,  260,  196,  260,  428,  429,  196,  430,  196,
      260,  196,  196,  196,  440,  196,  482,  482,  482,  196,
      196,  196,  196,  196,  441,  196,  442,  196,  482,  196,
      196,  196,  196,  196,  196,  196,  440,  196,  482,  482,
      196,  196,  196,  196,  196,  214,  441,  196,  442,  196,
      214,  443,  196,  214,  196,  196,  214,  196,  214,  482,
      214,  482,  196,  444,  214,  196,  214,  214,  214,  196,

      445,  214,  214,  443,  214,  214,  214,  196,  214,  214,
      214,  214,  214,  446,  214,  444,  214,  214,  214,  214,
      214,  214,  445,  214,  447,  214,  214,  482,  214,  214,
      214,  214,  482,  214,  239,  446,  214,  239,  214,  214,
      214,  214,  239,  214,  448,  239,  447,  214,  214,  239,
      449,  214,  214,  239,  482,  482,  239,  239,  482,  239,
      214,  239,  214,  482,  239,  239,  448,  239,  239,  482,
      214,  239,  449,  239,  239,  239,  239,  450,  239,  239,
      239,  451,  239,  239,  260,  239,  239,  239,  239,  452,
      239,  482,  260,  239,  482,  239,  239,  482,  239,  450,

      239,  260,  239,  451,  239,  260,  260,  239,  239,  260,
      239,  452,  260,  260,  260,  239,  260,  260,  453,  482,
      260,  454,  260,  260,  260,  260,  482,  260,  455,  456,
      260,  260,  482,  260,  260,  260,  482,  260,  260,  260,
      453,  260,  260,  454,  260,  260,  260,  260,  260,  260,
      455,  456,  260,  196,  260,  260,  260,  260,  457,  260,
      196,  196,  260,  260,  482,  196,  196,  260,  196,  463,
      260,  260,  462,  196,  196,  196,  260,  214,  260,  260,
      457,  214,  196,  196,  260,  214,  482,  196,  196,  214,
      196,  463,  482,  214,  462,  196,  196,  482,  214,  214,

      464,  214,  214,  214,  239,  465,  214,  214,  482,  239,
      214,  214,  239,  239,  482,  214,  466,  239,  482,  482,
      214,  239,  464,  214,  214,  482,  239,  465,  214,  260,
      482,  239,  214,  239,  239,  239,  467,  260,  466,  239,
      260,  239,  260,  239,  260,  260,  196,  469,  260,  468,
      260,  260,  260,  260,  196,  239,  482,  196,  467,  260,
      472,  482,  260,  239,  260,  196,  260,  260,  196,  469,
      260,  468,  260,  214,  260,  260,  196,  214,  239,  196,
      239,  214,  472,  482,  482,  214,  239,  196,  239,  260,
      260,  473,  474,  196,  482,  214,  482,  260,  260,  214,

      239,  196,  239,  214,  475,  482,  478,  214,  239,  214,
      239,  260,  260,  473,  474,  196,  239,  214,  482,  260,
      260,  482,  479,  196,  239,  196,  475,  260,  478,  480,
      482,  214,  482,  196,  214,  260,  482,  239,  239,  214,
      481,  482,  214,  482,  479,  239,  239,  196,  482,  260,
      260,  480,  482,  482,  482,  196,  214,  260,  260,  239,
      482,  482,  481,  482,  214,  482,  482,  239,  482,  482,
      482,  482,  260,  482,  482,  482,  482,  482,  482,  482,
      260,  188,  482,  188,  482,  188,  196,  482,  196,  482,
      196,  213,  482,  213,  482,  213,  214,  482,  214,  482,

      214,  233,  482,  482,  233,  233,  239,  482,  482,  239,
      239,  256,  256,  256,  256,  256,  259,  482,  482,  259,
      259,  260,  482,  482,  260,  260,  279,  279,  279,  279,
      279,    7,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482

    } ;

static const flex_int16_t yy_chk[2295] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    9,    9,   10,   10,
       19,   19,   22,   26,   27,   28,   32,   30,   29,   27,

       22,   26,   29,   30,   31,   33,   29,   34,   35,  485,
       31,   54,   54,  484,   40,   26,   27,   28,   32,   30,
       29,   27,   40,   26,   29,   30,   31,   33,   29,   34,
       35,   43,   31,   41,   42,   43,   40,   44,   41,   43,
       45,   42,   46,   44,   40,   47,   45,   49,   48,   55,
       55,   63,   63,   43,   48,   41,   42,   43,   66,   44,
       41,   43,   45,   42,   46,   44,   66,   47,   45,   49,
       48,   98,   98,   99,   99,   71,   48,   69,   69,  483,
       69,  111,   69,   71,   69,   69,   69,   69,   71,  111,
       69,   69,   69,   69,   69,   69,   72,   71,   74,   77,

      108,  108,   74,   72,   72,   71,   74,   77,   74,   77,
       71,  143,  143,  126,   69,   69,   69,  279,   72,  152,
       74,   77,  126,  153,   74,   72,   72,  146,   74,   77,
       74,   77,  147,  147,  189,  189,   69,   69,   69,   70,
       70,  152,   70,  112,   70,  153,   70,   70,   70,   70,
       67,  154,   70,   70,   70,   70,   70,   70,   70,   75,
       76,  155,  158,   75,   78,   76,   70,   75,   76,   75,
       78,  159,   78,  154,   58,  160,   70,   70,   70,   56,
       70,   75,   76,  155,  158,   75,   78,   76,   70,   75,
       76,   75,   78,  159,   78,   85,   79,  160,   70,   70,

       70,   73,   79,   85,   79,   86,   73,  161,   85,   73,
       73,   91,   86,   86,   73,  192,  192,   85,   79,   91,
       23,   91,   16,   73,   79,   85,   79,   86,   73,  161,
       85,   73,   73,   91,   86,   86,   73,   82,   82,   14,
       82,   91,   82,   91,   82,   82,   82,   82,  234,  234,
       82,   82,   82,   82,   82,   82,   88,   89,  162,  163,
       88,   89,  117,   90,   88,   89,   88,   89,   90,  117,
      117,   90,  165,  166,   82,   82,   82,   12,   88,   89,
      162,  163,   88,   89,  117,   90,   88,   89,   88,   89,
       90,  117,  117,   90,  165,  166,   82,   82,   82,   83,

       83,  167,   83,    7,   83,    0,   83,   83,   83,   83,
      170,    0,   83,   83,   83,   83,   83,   83,   92,   93,
      116,  122,  171,  167,   92,   93,   92,   93,  116,  122,
       92,  122,  170,  116,  172,  173,   83,   83,   83,    0,
       92,   93,  116,  122,  171,  174,   92,   93,   92,   93,
      116,  122,   92,  122,    0,  116,  172,  173,   83,   83,
       83,   84,   84,    0,   84,    0,   84,  174,   84,   84,
       84,   84,  177,    0,   84,   84,   84,   84,   84,   84,
       84,  119,  120,  178,  179,  119,  120,  123,   84,  119,
      120,  119,  120,  123,  177,  123,  180,    0,   84,   84,

       84,    0,   84,  119,  120,  178,  179,  119,  120,  123,
       84,  119,  120,  119,  120,  123,  181,  123,  180,  121,
       84,   84,   84,   87,  121,  134,  131,  121,   87,  134,
      182,   87,   87,  134,  131,  134,   87,    0,  181,  131,
      184,  121,  235,  235,    0,   87,  121,  134,  131,  121,
       87,  134,  182,   87,   87,  134,  131,  134,   87,  114,
      114,  131,  184,  114,  114,  114,  114,  114,  114,  114,
        0,  185,  114,  114,  114,  114,  114,  114,  124,  186,
      132,  135,  137,  187,  124,  135,  124,  132,  132,  135,
      137,  135,  137,  185,  281,  282,  114,    0,  114,    0,

      124,  186,  132,  135,  137,  187,  124,  135,  124,  132,
      132,  135,  137,  135,  137,    0,  281,  282,  114,  114,
      114,  115,  115,    0,    0,  115,  115,  115,  115,  115,
      115,  115,  283,    0,  115,  115,  115,  115,  115,  115,
      115,  136,  284,    0,  138,  139,  136,  196,  115,  136,
      138,  139,  138,  139,  283,  196,  138,  198,  115,    0,
      115,    0,  115,  136,  284,  198,  138,  139,  136,  196,
      115,  136,  138,  139,  138,  139,  197,  196,  138,  198,
      115,  115,  115,  118,  197,  200,  199,  198,  118,  197,
      285,  118,  118,  200,  199,    0,  118,    0,  197,  199,

        0,    0,    0,    0,    0,  118,  197,  200,  199,  201,
      118,  197,  285,  118,  118,  200,  199,  201,  118,  128,
      128,  199,  202,  128,  128,  128,  128,  128,  128,  128,
      202,  201,  128,  128,  128,  128,  128,  128,  286,  201,
      203,  205,  209,  211,  202,  204,  203,  211,  203,  205,
      209,  211,  202,  204,  288,  205,  128,    0,  128,    0,
      286,  204,  203,  205,  209,  211,    0,  204,  203,  211,
      203,  205,  209,  211,    0,  204,  288,  205,  128,  128,
      128,  129,  129,  204,  291,  129,  129,  129,  129,  129,
      129,  129,  206,  207,  129,  129,  129,  129,  129,  129,

      206,  207,  206,  208,  292,  212,  291,  293,  214,  294,
      207,  208,  212,  212,  206,  207,  214,  208,  129,    0,
      129,    0,  206,  207,  206,  208,  292,  212,    0,  293,
      214,  294,  207,  208,  212,  212,    0,    0,  214,  208,
      129,  129,  129,  130,  130,    0,  216,  130,  130,  130,
      130,  130,  130,  130,  216,  210,  130,  130,  130,  130,
      130,  130,  130,  210,    0,  210,  215,  218,  216,  295,
      130,  296,    0,  297,  215,  218,  216,  210,  298,  215,
      130,    0,  130,    0,  130,  210,  217,  210,  215,  218,
      219,  295,  130,  296,  217,  297,  215,  218,  219,  217,

      298,  215,  130,  130,  130,  133,  299,  220,  217,  221,
      133,  300,  219,  133,  133,  220,  217,  221,  133,    0,
      219,  217,    0,    0,    0,  302,    0,  133,  299,  220,
      305,  221,  133,  300,    0,  133,  133,  220,    0,  221,
      133,  213,  213,  306,  213,  223,  213,  302,  213,  213,
      213,  213,  305,  223,  213,  213,  213,  213,  213,  213,
      222,  223,  224,  225,  226,  306,  222,  223,  222,    0,
      224,  225,  226,  225,    0,  223,  224,    0,  213,  213,
      213,  226,  222,  223,  224,  225,  226,  307,  222,  228,
      222,  227,  224,  225,  226,  225,  229,  228,  224,  227,

      213,  213,  213,  226,  229,  227,  229,  231,  230,  307,
        0,  228,  230,  227,  308,  231,  230,  232,  229,  228,
        0,  227,  231,  239,  232,  232,  229,  227,  229,  231,
      230,  239,  241,    0,  230,  240,  308,  231,  230,  232,
      241,  243,  242,  240,  231,  239,  232,  232,  240,  243,
      242,  244,  245,  239,  241,  242,    0,  240,  250,  244,
      245,  246,  241,  243,  242,  240,  250,  246,  247,  246,
      240,  243,  242,  244,  245,  250,  247,  242,  248,  252,
      250,  244,  245,  246,  247,  249,  248,  252,  250,  246,
      247,  246,  248,  249,    0,  249,  251,  250,  247,    0,

      248,  252,  366,  253,  251,    0,  247,  249,  248,  252,
      251,  253,  254,  253,  248,  249,  254,  249,  251,  260,
      254,  255,  369,  370,  366,  253,  251,  260,  255,  255,
        0,    0,  251,  253,  254,  253,    0,    0,  254,    0,
        0,  260,  254,  255,  369,  370,    0,    0,    0,  260,
      255,  255,  259,  259,    0,  374,  259,  259,  259,  259,
      259,  259,  259,  261,  262,  259,  259,  259,  259,  259,
      259,  261,  262,  264,  263,  265,  261,  374,    0,  376,
      266,  264,  263,  265,  267,  261,  262,  263,  266,  259,
        0,  259,  267,  261,  262,  264,  263,  265,  261,    0,

      269,  376,  266,  264,  263,  265,  267,  379,  269,  263,
      266,  259,  259,  259,  267,  268,  269,  270,  271,  272,
        0,  268,  269,  268,    0,  270,  271,  272,  271,  379,
      269,  270,    0,  380,  274,    0,  272,  268,  269,  270,
      271,  272,  274,  268,    0,  268,  273,  270,  271,  272,
      271,  275,    0,  270,  273,  380,  274,  277,  272,  275,
      273,  275,  276,    0,  274,  277,  276,  278,  273,    0,
      276,    0,  277,  275,  278,  278,  273,    0,    0,  277,
        0,  275,  273,  275,  276,  310,    0,  277,  276,  278,
      381,  309,  276,  310,  277,  309,  278,  278,  310,  309,

      311,  312,  313,  312,  311,    0,  313,  310,  311,  312,
      313,  386,  381,  309,    0,  310,  432,  309,  433,  314,
      310,  309,  311,  312,  313,  312,  311,  314,  313,  314,
      311,  312,  313,  386,  315,  316,  317,  318,  432,  319,
      433,  314,  315,  316,  317,  318,  316,  319,    0,  314,
      437,  314,  321,    0,  320,    0,  315,  316,  317,  318,
      321,  319,  320,  320,  315,  316,  317,  318,  316,  319,
      323,  322,  437,  324,  321,  322,  320,  324,  323,  322,
        0,  324,  321,  323,  320,  320,  325,    0,  325,    0,
      438,    0,  323,  322,  325,  324,  326,  322,  327,  324,

      323,  322,  327,  324,  326,  323,  327,  328,  325,  326,
      325,  329,  438,  331,  330,  328,  325,  328,  326,  329,
      327,  331,  330,    0,  327,  330,  326,    0,  327,  328,
      332,  326,  333,  329,    0,  331,  330,  328,  332,  328,
      333,  329,  334,  331,  330,  335,  458,  330,  336,  335,
      334,  334,  332,  335,  333,  337,  336,  343,    0,  337,
      332,  338,  333,  337,  334,  343,    0,  335,  458,  338,
      336,  335,  334,  334,  338,  335,  339,  337,  336,  343,
      339,  337,  342,  338,  339,  337,  340,  343,  340,  341,
      342,  338,  342,  341,  340,    0,  338,  341,  339,  345,

        0,  460,  339,  470,  342,  346,  339,  345,  340,  344,
      340,  341,  342,  346,  342,  341,  340,  344,  347,  341,
      344,  345,  349,  460,  348,  470,  347,  346,  471,  345,
      349,  344,  348,  348,    0,  346,    0,  350,    0,  344,
      347,  350,  344,  351,  349,  350,  348,    0,  347,  352,
      471,  351,  349,  352,  348,  348,  351,  352,  353,  350,
      353,  354,  357,  350,  355,  351,  353,  350,  355,  354,
      357,  352,  355,  351,  354,  352,    0,  356,  351,  352,
      353,    0,  353,  354,  357,  356,  355,  356,  353,  358,
      355,  354,  357,  359,  355,  360,  354,  358,  361,  356,

      358,  359,    0,  360,  362,    0,  361,  356,  364,  356,
      363,  358,  362,  362,  363,  359,  364,  360,  363,  358,
      361,  387,  358,  359,    0,  360,  362,    0,  361,  387,
      364,  388,  363,  389,  362,  362,  363,  390,  364,  388,
      363,  389,  391,  387,  388,  390,    0,    0,    0,  392,
      391,  387,  393,  388,  391,  389,  392,  392,    0,  390,
      393,  388,  394,  389,  391,  395,  388,  390,    0,    0,
      394,  392,  391,  395,  393,  397,  391,  396,  392,  392,
      398,  396,  393,  397,  394,  396,  399,  395,  398,    0,
      400,    0,  394,  398,  399,  395,  401,  397,  400,  396,

      401,  402,  398,  396,  401,  397,  404,  396,  399,  402,
      398,  405,  400,  402,  404,  398,  399,  403,  401,  405,
      400,  406,  401,  402,  403,  403,  401,    0,  404,  406,
      407,  402,    0,  405,  409,  402,  404,  410,  407,  403,
      408,  405,  409,  406,  408,  410,  403,  403,  408,  411,
      410,  406,  407,  412,    0,    0,  409,  411,    0,  410,
      407,  412,  408,    0,  409,  413,  408,  410,  415,    0,
      408,  411,  410,  413,  414,  412,  415,  413,  416,  411,
      417,  414,  414,  412,  419,  418,  416,  413,  417,  418,
      415,    0,  419,  418,    0,  413,  414,    0,  415,  413,

      416,  421,  417,  414,  414,  420,  419,  418,  416,  421,
      417,  418,  422,  420,  419,  418,  424,  423,  420,    0,
      422,  423,  425,  421,  424,  423,    0,  420,  424,  425,
      425,  421,    0,  426,  422,  420,    0,  427,  424,  423,
      420,  426,  422,  423,  425,  427,  424,  423,  428,  429,
      424,  425,  425,  440,  430,  426,  428,  429,  430,  427,
      443,  440,  430,  426,    0,  441,  442,  427,  443,  442,
      428,  429,  441,  441,  442,  440,  430,  444,  428,  429,
      430,  445,  443,  440,  430,  444,    0,  441,  442,  445,
      443,  442,    0,  446,  441,  441,  442,    0,  448,  444,

      446,  446,  447,  445,  449,  447,  448,  444,    0,  450,
      447,  445,  449,  452,    0,  446,  450,  450,    0,    0,
      448,  452,  446,  446,  447,    0,  449,  447,  448,  453,
        0,  450,  447,  451,  449,  452,  451,  453,  450,  450,
      454,  451,  455,  452,  456,  457,  462,  456,  454,  455,
      455,  453,  456,  457,  462,  451,    0,  463,  451,  453,
      462,    0,  454,  451,  455,  463,  456,  457,  462,  456,
      454,  455,  455,  465,  456,  457,  462,  464,  466,  463,
      467,  465,  462,    0,    0,  464,  466,  463,  467,  469,
      468,  464,  466,  472,    0,  465,    0,  469,  468,  464,

      466,  472,  467,  465,  468,    0,  472,  464,  466,  473,
      467,  469,  468,  464,  466,  472,  474,  473,    0,  469,
      468,    0,  473,  472,  474,  478,  468,  475,  472,  474,
        0,  473,    0,  478,  479,  475,    0,  480,  474,  473,
      475,    0,  479,    0,  473,  480,  474,  478,    0,  475,
      481,  474,    0,    0,    0,  478,  479,  475,  481,  480,
        0,    0,  475,    0,  479,    0,    0,  480,    0,    0,
        0,    0,  481,    0,    0,    0,    0,    0,    0,    0,
      481,  486,    0,  486,    0,  486,  487,    0,  487,    0,
      487,  488,    0,  488,    0,  488,  489,    0,  489,    0,

      489,  490,    0,    0,  490,  490,  491,    0,    0,  491,
      491,  492,  492,  492,  492,  492,  493,    0,    0,  493,
      493,  494,    0,    0,  494,  494,  495,  495,  495,  495,
      495,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[63] =
    {   0,
1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./CoolLexer.flex"
#line 2 "./CoolLexer.flex"

#include <iostream>
#include <fstream>
#include <cstdio>
#include <string>

#include "Parser.h"
#include "CoolLexer.h"

#undef YY_DECL
#define YY_DECL int CoolLexer::yylex()

#define ERROR -1

int comment_depth = 0;
int curline = 1;

#line 1119 "CoolLexer.cpp"

#line 1121 "CoolLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 39 "./CoolLexer.flex"


#line 1258 "CoolLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 483 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 482 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 41 "./CoolLexer.flex"
{ ++lineno; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "./CoolLexer.flex"
{ Error("Wrong comment close-bracket"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "./CoolLexer.flex"
{ BEGIN(COMMENT); comment_depth = 0; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "./CoolLexer.flex"
{ ++comment_depth; }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 45 "./CoolLexer.flex"
{ Error("Unterminated comment"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 46 "./CoolLexer.flex"
{ ++lineno; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 47 "./CoolLexer.flex"
{ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 48 "./CoolLexer.flex"
{ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 49 "./CoolLexer.flex"
{
                      if (comment_depth == 0) BEGIN(INITIAL);
                      --comment_depth;
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "./CoolLexer.flex"
{ BEGIN(STRING); yymore(); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 55 "./CoolLexer.flex"
{ Error("Unexpected nl in string"); BEGIN(INITIAL); curline++; return ERROR; }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 56 "./CoolLexer.flex"
{ Error("EOF in string"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "./CoolLexer.flex"
{ BEGIN(INITIAL); Error("Unexpected null-term in string"); yymore(); return ERROR; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "./CoolLexer.flex"
{ yymore(); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "./CoolLexer.flex"
{ yymore(); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 60 "./CoolLexer.flex"
{ curline++; yymore(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "./CoolLexer.flex"
{ BEGIN(INITIAL); Escape(); return TOKEN_STRING; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 63 "./CoolLexer.flex"
return TOKEN_CLASS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 64 "./CoolLexer.flex"
return TOKEN_TRUE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 65 "./CoolLexer.flex"
return TOKEN_FALSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 66 "./CoolLexer.flex"
return TOKEN_ELSE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 67 "./CoolLexer.flex"
return TOKEN_FI;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 68 "./CoolLexer.flex"
return TOKEN_IF;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 69 "./CoolLexer.flex"
return TOKEN_IN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 70 "./CoolLexer.flex"
return TOKEN_INHERITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 71 "./CoolLexer.flex"
return TOKEN_ISVOID;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 72 "./CoolLexer.flex"
return TOKEN_LET;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 73 "./CoolLexer.flex"
return TOKEN_LOOP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 74 "./CoolLexer.flex"
return TOKEN_POOL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 75 "./CoolLexer.flex"
return TOKEN_THEN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 76 "./CoolLexer.flex"
return TOKEN_WHILE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 77 "./CoolLexer.flex"
return TOKEN_CASE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 78 "./CoolLexer.flex"
return TOKEN_ESAC;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 79 "./CoolLexer.flex"
return TOKEN_NEW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 80 "./CoolLexer.flex"
return TOKEN_OF;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 81 "./CoolLexer.flex"
return TOKEN_NOT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 83 "./CoolLexer.flex"
return TOKEN_INTCONST;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OBJECT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_TYPE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OTHER;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "./CoolLexer.flex"
return TOKEN_DOT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "./CoolLexer.flex"
return TOKEN_AT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 90 "./CoolLexer.flex"
return TOKEN_TILDA;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 91 "./CoolLexer.flex"
return TOKEN_MUL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 92 "./CoolLexer.flex"
return TOKEN_DIV;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 93 "./CoolLexer.flex"
return TOKEN_PLUS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 94 "./CoolLexer.flex"
return TOKEN_MINUS;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 95 "./CoolLexer.flex"
return TOKEN_LE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 96 "./CoolLexer.flex"
return TOKEN_ME;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 97 "./CoolLexer.flex"
return TOKEN_LESS;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 98 "./CoolLexer.flex"
return TOKEN_EQ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 99 "./CoolLexer.flex"
return TOKEN_ARROW;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 101 "./CoolLexer.flex"
return TOKEN_SQUARE_PARENTESES_LEFT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 102 "./CoolLexer.flex"
return TOKEN_SQUARE_PARENTESES_RIGHT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 103 "./CoolLexer.flex"
return TOKEN_CURVE_PARENTESES_LEFT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 104 "./CoolLexer.flex"
return TOKEN_CURVE_PARENTESES_RIGHT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 105 "./CoolLexer.flex"
return TOKEN_ROUND_PARENTESES_LEFT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 106 "./CoolLexer.flex"
return TOKEN_ROUND_PARENTESES_RIGHT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "./CoolLexer.flex"
return TOKEN_SEMICOLON;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "./CoolLexer.flex"
return TOKEN_COLON;
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 111 "./CoolLexer.flex"
lineno++;
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 112 "./CoolLexer.flex"
{ }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "./CoolLexer.flex"
{ Error("Unrecognized charachter"); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 115 "./CoolLexer.flex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1654 "CoolLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 483 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 483 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 482);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 115 "./CoolLexer.flex"


void CoolLexer::Error(const char* msg) const
{
    std::cerr << "Lexer error (line " << lineno + 1 << "): " << msg << ": lexeme '" << YYText() << "'\n";
    std::exit(YY_EXIT_FAILURE);
}

void CoolLexer::Escape() const {
    const char *input = yytext;
    char *output = yytext;
    input++; // Skip opening '\"'
    while (*(input + 1) /* Skip closing '\"' */ ) {
        if (*input == '\\') {
            input++; // Skip '\\'
            switch (*input) {
                case 'n': *output++ = '\n'; break;
                case 't': *output++ = '\t'; break;
                case 'f': *output++ = '\f'; break;
                case 'b': *output++ = '\b'; break;
                default: *output++ = *input;
            }
        } else {
            *output++ = *input;
        }
        input++;
    }
    *output = '\0';
}

