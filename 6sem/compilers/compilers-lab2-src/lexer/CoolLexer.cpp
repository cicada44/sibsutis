#line 2 "CoolLexer.cpp"

#line 4 "CoolLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CoolLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[336] =
    {   0,
       59,   59,    0,    0,   11,   11,   62,   60,   59,   58,
        8,   54,   55,   41,   43,   44,   38,   42,   34,   57,
       56,   47,   48,   39,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   50,   51,   37,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   52,
       53,   40,    6,    5,    6,    6,   11,   11,    9,   14,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   60,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   10,   59,    3,    2,    1,   34,   49,   45,
       46,   36,   36,   36,   36,   36,   19,   20,   21,   36,
       36,   36,   36,   36,   32,   36,   36,   36,   37,   35,
       35,   35,   35,   35,   35,   19,   20,   21,   35,   35,
       35,   35,   35,   32,   35,   35,   35,   35,    4,    7,
       11,   11,    3,    2,    1,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   13,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    1,   36,

       36,   36,   36,   36,   36,   24,   36,   31,   33,   36,
       36,   36,   35,   35,   35,   35,   35,   35,   35,   24,
       35,   31,   33,   35,   35,   35,   35,    1,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   29,   36,   18,   30,
       36,   36,   25,   26,   27,   36,   29,   35,   18,   30,
       35,   35,   35,   25,   26,   27,   16,   35,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       15,   36,   36,   28,   15,   17,   35,   35,   28,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   36,   23,
       35,   23,   11,   11,   11,   11,   36,   35,   11,   11,
       22,   22,   11,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,   15,
       16,   17,    1,   18,   19,   20,   21,   22,   23,   24,
       20,   25,   26,   20,   20,   27,   20,   28,   29,   30,
       20,   31,   32,   33,   34,   35,   36,   20,   20,   20,
       37,   38,   39,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   42,   47,   48,   42,   42,   49,   42,   50,
       51,   52,   42,   53,   54,   55,   56,   57,   58,   42,
       42,   42,   59,    1,   60,   61,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    3,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[347] =
    {   0,
        0,    0,   60,   61,   68,    0,  415, 1255,  129,  131,
     1255,  382, 1255,  375, 1255,  371, 1255, 1255,  351, 1255,
     1255,  126,  345, 1255,    0,  117,  111,  111,  117,  117,
      124,  115,  119,  125,  126, 1255, 1255,    0,    0,  137,
      125,  157,  153,  159,  161,  156,  158,  164,  166, 1255,
     1255, 1255, 1255, 1255,  354,  354,    0,  152,  190, 1255,
      350,    0,  350,    0,  310,    0,    0,  305,    0,    0,
      185,  298,    0,  217,  279,  210,  217,  323,  280,  281,
      221,  220,  286,  318,    0,  311,    0,  377,  439,  501,
      317,  327,  545,  377,  378,  384,  383,  439,  440,    0,

        0,    0,    0,  194, 1255, 1255,    0,  271, 1255, 1255,
     1255,    0,  184,  222,  214,  231,    0,    0,  227,  218,
      227,  272,  266,  279,    0,  319,  329,  372,    0,    0,
      367,  390,  381,  432,  433,    0,    0,  436,  427,  430,
      439,  433,  438,    0,  443,  451,  441,  478, 1255, 1255,
        0,  212,    0,    0,  217,  261,    0,    0,    0,  486,
      502,  503,  504,  505,  506,  530,  540,  547,  551,  556,
      574,  584,  549,  589,  601,  595, 1255, 1255,  650,  600,
      643,  650,  653,  652,  654,  655,  659,  694,  679,  696,
      697,  698,  725,  713,  730,  741,  736,  746,    0,  557,

      577,  589,  592,  603,  625,    0,  653,    0,    0,  704,
      733,  740,  746,  743,  753,  757,  752,  765,  764,    0,
      766,    0,    0,  772,  773,  779,  776,  253,  785,  790,
      809,  786,  814,  819,  824,  826,  830,  842,  845,  857,
      847,  870,  863,  882,  881,  894,  891,  910,  901,  914,
      919,  926,  930,  937,  935,  950,    0,  788,    0,    0,
      809,  851,    0,    0,    0,  858,    0,  893,    0,    0,
      929,  939,  946,    0,    0,    0,    0,  950,  962,  966,
      963,  969,  978,  987,  981,  997,  998, 1010, 1007, 1013,
     1022, 1023, 1034, 1039, 1050, 1033, 1046, 1059, 1062, 1074,

        0,  975,  999,    0,    0,    0, 1042, 1062,    0, 1075,
     1086, 1095, 1077, 1101, 1102, 1106, 1118, 1111, 1052,    0,
     1076,    0, 1130, 1129, 1139, 1134, 1114, 1132, 1150, 1157,
        0,    0, 1146, 1173, 1255, 1222,  216,  204,  196, 1226,
     1230, 1234, 1238, 1242, 1246, 1250
    } ;

static const flex_int16_t yy_def[347] =
    {   0,
      335,    1,  336,  336,  335,    5,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  335,  335,  338,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  335,
      335,  335,  335,  335,  335,  335,  340,  340,  335,  335,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  341,  341,   75,   75,   75,   75,   75,
       75,   75,   75,   75,  340,  342,  340,  343,  344,  344,
       90,   90,   90,   90,   90,   90,   90,   90,   90,  340,

      340,  340,  340,  335,  335,  335,  345,  335,  335,  335,
      335,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  338,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  335,  335,
      340,  340,  340,  340,  346,  340,  340,  340,  340,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  335,  335,  343,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,  345,  337,

      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  346,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

      337,  337,  337,  337,  339,  339,  339,  339,  339,   75,
       75,   75,   75,   90,   90,   90,   90,   90,  337,  337,
      339,  339,   75,   75,   90,   90,  337,  339,   75,   90,
      337,  339,   75,   90,    0,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335
    } ;

static const flex_int16_t yy_nxt[1318] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,    8,   24,   25,   25,
       26,   25,   27,   28,   25,   29,   30,   31,   32,   33,
       25,   25,   34,   25,   25,   35,   36,    8,   37,   38,
       39,   39,   40,   39,   41,   42,   39,   43,   44,   45,
       46,   47,   39,   39,   48,   39,   39,   49,   50,   51,
       52,    8,   54,   54,   55,   55,   56,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   57,   73,   74,   74,   75,   74,
       76,   77,   74,   78,   79,   80,   81,   82,   74,   74,

       83,   74,   74,   84,   85,   86,   87,   88,   89,   89,
       90,   89,   91,   92,   89,   93,   94,   95,   96,   97,
       89,   89,   98,   89,   89,   99,  100,  101,  102,  103,
      104,  104,  104,  104,  109,  113,  117,  115,  125,  121,
      118,  110,  116,  114,  119,  122,  123,  126,  120,  127,
      128,  133,  124,  152,  104,  131,  134,  113,  117,  115,
      125,  121,  118,  132,  116,  114,  119,  122,  123,  126,
      120,  127,  128,  133,  124,  135,  137,  131,  134,  144,
      138,  140,  136,  142,  139,  132,  145,  141,  146,  143,
      148,  104,  104,  157,  147,  104,  104,  135,  137,  130,

      158,  144,  138,  140,  136,  142,  139,  129,  145,  141,
      146,  143,  148,  152,  104,  200,  147,  151,  151,  112,
      199,  151,  151,  151,  151,  151,  151,  151,  160,  151,
      151,  151,  151,  151,  151,  160,  163,  200,  160,  160,
      201,  164,  165,  160,  173,  202,  160,  160,  174,  203,
      160,  204,  205,  151,  199,  151,  199,  160,  163,  206,
      160,  160,  201,  164,  165,  160,  173,  202,  160,  160,
      174,  203,  156,  204,  205,  151,  151,  151,  151,  151,
      151,  206,  108,  151,  151,  151,  151,  151,  151,  151,
      199,  151,  151,  151,  151,  151,  151,  161,  160,  160,

      207,  208,  169,  171,  160,  162,  160,  160,  170,  172,
      175,  209,  160,  178,  159,  151,  156,  151,  155,  161,
      160,  160,  207,  208,  169,  171,  160,  162,  160,  160,
      170,  172,  175,  209,  160,  180,  160,  151,  151,  151,
      151,  160,  176,  183,  160,  185,  166,  210,  184,  160,
      167,  211,  186,  180,  168,  154,  153,  180,  160,  150,
      149,  111,  108,  160,  176,  183,  160,  185,  166,  210,
      184,  160,  167,  211,  186,  180,  168,  151,  151,  107,
      106,  151,  151,  151,  151,  151,  151,  151,  105,  151,
      151,  151,  151,  151,  151,  180,  180,  212,  213,  190,

      192,  180,  180,  180,  180,  191,  193,  194,  214,  180,
      180,  195,  215,  151,  335,  151,  335,  180,  180,  212,
      213,  190,  192,  180,  180,  180,  180,  191,  193,  194,
      214,  180,  180,  195,  215,  151,  151,  151,  151,  151,
      151,  335,  335,  151,  151,  151,  151,  151,  151,  151,
      216,  151,  151,  151,  151,  151,  151,  180,  180,  217,
      218,  219,  220,  196,  198,  180,  180,  221,  222,  197,
      223,  224,  216,  225,  226,  151,  335,  151,  335,  180,
      180,  217,  218,  219,  220,  196,  198,  180,  180,  221,
      222,  197,  223,  224,  335,  225,  226,  151,  151,  151,

      151,  151,  151,  227,  160,  151,  151,  151,  151,  151,
      151,  151,  160,  151,  151,  151,  151,  151,  151,  181,
      160,  230,  160,  232,  160,  227,  160,  182,  160,  160,
      160,  160,  160,  229,  160,  231,  335,  151,  335,  151,
      335,  181,  160,  230,  160,  232,  160,  335,  160,  182,
      160,  160,  160,  160,  160,  229,  160,  231,  160,  151,
      151,  151,  151,  180,  233,  160,  160,  160,  187,  160,
      160,  180,  188,  160,  160,  160,  189,  160,  160,  257,
      160,  234,  160,  235,  236,  180,  233,  160,  160,  160,
      187,  160,  160,  180,  188,  160,  160,  160,  189,  160,

      160,  257,  160,  234,  160,  235,  236,  160,  258,  237,
      160,  259,  260,  160,  160,  160,  238,  239,  180,  160,
      241,  160,  160,  240,  160,  261,  180,  160,  335,  160,
      258,  237,  160,  259,  260,  160,  335,  160,  238,  239,
      180,  160,  241,  160,  335,  240,  335,  261,  180,  160,
      151,  151,  335,  262,  151,  151,  151,  151,  151,  151,
      151,  180,  151,  151,  151,  151,  151,  151,  243,  180,
      245,  180,  180,  180,  242,  262,  180,  180,  180,  180,
      246,  180,  263,  180,  244,  180,  151,  335,  151,  335,
      243,  180,  245,  180,  180,  180,  242,  180,  180,  180,

      180,  180,  246,  180,  263,  180,  244,  180,  151,  151,
      151,  151,  180,  248,  180,  180,  180,  335,  247,  180,
      180,  335,  180,  180,  180,  250,  335,  180,  249,  335,
      264,  180,  335,  251,  180,  248,  180,  180,  180,  180,
      247,  335,  180,  180,  180,  180,  180,  250,  180,  335,
      249,  180,  264,  180,  180,  251,  180,  252,  253,  180,
      265,  180,  180,  254,  180,  180,  266,  180,  267,  255,
      180,  256,  180,  180,  268,  269,  180,  270,  180,  252,
      253,  180,  265,  271,  180,  254,  180,  272,  266,  180,
      267,  255,  273,  256,  180,  274,  268,  269,  275,  270,

      276,  277,  278,  160,  160,  271,  282,  279,  160,  272,
      335,  160,  160,  335,  273,  335,  160,  274,  335,  301,
      275,  280,  276,  277,  278,  160,  160,  160,  282,  279,
      160,  281,  160,  160,  160,  160,  283,  160,  160,  302,
      160,  301,  160,  280,  160,  160,  335,  284,  160,  160,
      160,  335,  160,  281,  160,  285,  160,  160,  283,  160,
      160,  302,  160,  160,  160,  160,  160,  160,  160,  284,
      160,  286,  160,  288,  160,  160,  303,  285,  160,  335,
      304,  180,  160,  160,  287,  160,  335,  160,  180,  180,
      160,  335,  289,  286,  290,  288,  180,  160,  303,  180,

      180,  292,  304,  180,  291,  160,  287,  180,  180,  180,
      180,  180,  180,  294,  289,  335,  290,  180,  180,  180,
      180,  180,  180,  292,  305,  293,  291,  180,  180,  180,
      180,  180,  180,  335,  180,  294,  180,  180,  295,  180,
      180,  180,  180,  296,  180,  180,  305,  293,  180,  180,
      180,  306,  180,  180,  180,  180,  297,  299,  180,  180,
      295,  180,  180,  180,  298,  296,  180,  180,  180,  307,
      180,  308,  309,  306,  180,  180,  300,  180,  297,  299,
      160,  160,  335,  180,  160,  180,  298,  160,  160,  160,
      180,  307,  160,  308,  309,  160,  160,  310,  300,  160,

      319,  335,  160,  160,  160,  160,  160,  160,  311,  160,
      160,  160,  312,  160,  160,  160,  160,  160,  160,  310,
      320,  160,  319,  160,  160,  180,  160,  160,  160,  160,
      311,  180,  313,  180,  312,  160,  160,  160,  160,  180,
      180,  180,  320,  335,  314,  160,  160,  180,  180,  180,
      160,  180,  180,  180,  313,  180,  315,  180,  160,  180,
      180,  180,  180,  180,  180,  180,  314,  321,  180,  316,
      180,  180,  180,  180,  180,  317,  180,  180,  315,  180,
      180,  180,  180,  322,  327,  180,  180,  180,  180,  321,
      180,  316,  180,  160,  180,  160,  318,  317,  180,  180,

      180,  160,  180,  160,  160,  322,  327,  180,  328,  335,
      180,  323,  160,  160,  180,  160,  324,  160,  318,  180,
      180,  160,  180,  160,  180,  160,  160,  180,  180,  180,
      328,  325,  180,  323,  160,  160,  180,  180,  324,  326,
      335,  180,  180,  160,  180,  331,  180,  160,  160,  180,
      180,  180,  180,  325,  180,  160,  160,  180,  180,  180,
      180,  326,  329,  332,  160,  180,  180,  331,  160,  160,
      160,  330,  160,  335,  180,  180,  160,  160,  160,  180,
      335,  333,  180,  180,  329,  332,  160,  180,  334,  335,
      160,  180,  335,  330,  160,  335,  335,  180,  160,  180,

      335,  335,  335,  333,  335,  180,  335,  335,  335,  335,
      334,  335,  335,  180,  335,  335,  335,  335,  335,  335,
      335,  180,   53,   53,   53,   53,  151,  335,  335,  151,
      160,  335,  335,  160,  177,  177,  177,  177,  179,  335,
      335,  179,  180,  335,  335,  180,  199,  335,  199,  199,
      228,  335,  228,  228,    7,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335
    } ;

static const flex_int16_t yy_chk[1318] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    3,    4,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        9,    9,   10,   10,   22,   26,   28,   27,   32,   30,
       29,   22,   27,   26,   29,   30,   31,   33,   29,   34,
       35,   41,   31,   58,   58,   40,   41,   26,   28,   27,
       32,   30,   29,   40,   27,   26,   29,   30,   31,   33,
       29,   34,   35,   41,   31,   42,   43,   40,   41,   46,
       43,   44,   42,   45,   43,   40,   47,   44,   48,   45,
       49,   59,   59,   71,   48,  104,  104,   42,   43,  339,

       71,   46,   43,   44,   42,   45,   43,  338,   47,   44,
       48,   45,   49,  152,  152,  113,   48,   74,   74,  337,
      155,   74,   74,   74,   74,   74,   74,   74,   76,   74,
       74,   74,   74,   74,   74,   77,   76,  113,   82,   81,
      114,   76,   77,   77,   81,  115,   82,   81,   82,  116,
       76,  119,  120,   74,  155,   74,  228,   77,   76,  121,
       82,   81,  114,   76,   77,   77,   81,  115,   82,   81,
       82,  116,  156,  119,  120,   74,   74,   74,   74,   75,
       75,  121,  108,   75,   75,   75,   75,   75,   75,   75,
      228,   75,   75,   75,   75,   75,   75,   75,   79,   80,

      122,  123,   79,   80,   83,   75,   79,   80,   79,   80,
       83,  124,   83,   86,   72,   75,   68,   75,   65,   75,
       79,   80,  122,  123,   79,   80,   83,   75,   79,   80,
       79,   80,   83,  124,   83,   91,   84,   75,   75,   75,
       75,   78,   84,   91,   84,   92,   78,  126,   91,   78,
       78,  127,   92,   92,   78,   63,   61,   91,   84,   56,
       55,   23,   19,   78,   84,   91,   84,   92,   78,  126,
       91,   78,   78,  127,   92,   92,   78,   88,   88,   16,
       14,   88,   88,   88,   88,   88,   88,   88,   12,   88,
       88,   88,   88,   88,   88,   94,   95,  128,  131,   94,

       95,   97,   96,   94,   95,   94,   95,   96,  132,   97,
       96,   97,  133,   88,    7,   88,    0,   94,   95,  128,
      131,   94,   95,   97,   96,   94,   95,   94,   95,   96,
      132,   97,   96,   97,  133,   88,   88,   88,   88,   89,
       89,    0,    0,   89,   89,   89,   89,   89,   89,   89,
      134,   89,   89,   89,   89,   89,   89,   98,   99,  135,
      138,  139,  140,   98,   99,   98,   99,  141,  142,   98,
      143,  145,  134,  146,  147,   89,    0,   89,    0,   98,
       99,  135,  138,  139,  140,   98,   99,   98,   99,  141,
      142,   98,  143,  145,    0,  146,  147,   89,   89,   89,

       89,   90,   90,  148,  160,   90,   90,   90,   90,   90,
       90,   90,  160,   90,   90,   90,   90,   90,   90,   90,
      161,  162,  163,  164,  165,  148,  160,   90,  161,  162,
      163,  164,  165,  161,  160,  163,    0,   90,    0,   90,
        0,   90,  161,  162,  163,  164,  165,    0,  166,   90,
      161,  162,  163,  164,  165,  161,  166,  163,  167,   90,
       90,   90,   90,   93,  167,  168,  167,  173,   93,  169,
      166,   93,   93,  168,  170,  173,   93,  169,  166,  200,
      167,  168,  170,  169,  170,   93,  167,  168,  167,  173,
       93,  169,  171,   93,   93,  168,  170,  173,   93,  169,

      171,  200,  172,  168,  170,  169,  170,  174,  201,  171,
      172,  202,  203,  176,  171,  174,  172,  174,  180,  175,
      176,  176,  171,  175,  172,  204,  180,  175,    0,  174,
      201,  171,  172,  202,  203,  176,    0,  174,  172,  174,
      180,  175,  176,  176,    0,  175,    0,  204,  180,  175,
      179,  179,    0,  205,  179,  179,  179,  179,  179,  179,
      179,  181,  179,  179,  179,  179,  179,  179,  182,  181,
      184,  183,  185,  186,  181,  205,  182,  187,  184,  183,
      185,  186,  207,  181,  183,  187,  179,    0,  179,    0,
      182,  181,  184,  183,  185,  186,  181,  189,  182,  187,

      184,  183,  185,  186,  207,  189,  183,  187,  179,  179,
      179,  179,  188,  189,  190,  191,  192,    0,  188,  189,
      188,    0,  190,  191,  192,  191,    0,  189,  190,    0,
      210,  194,    0,  192,  188,  189,  190,  191,  192,  194,
      188,    0,  188,  193,  190,  191,  192,  191,  195,    0,
      190,  193,  210,  194,  197,  192,  195,  193,  195,  196,
      211,  194,  197,  196,  198,  193,  212,  196,  213,  197,
      195,  198,  198,  193,  214,  215,  197,  216,  195,  193,
      195,  196,  211,  217,  197,  196,  198,  218,  212,  196,
      213,  197,  219,  198,  198,  221,  214,  215,  224,  216,

      225,  226,  227,  229,  232,  217,  232,  229,  230,  218,
        0,  229,  232,    0,  219,    0,  230,  221,    0,  258,
      224,  230,  225,  226,  227,  229,  232,  231,  232,  229,
      230,  231,  233,  229,  232,  231,  233,  234,  230,  261,
      233,  258,  235,  230,  236,  234,    0,  234,  237,  231,
      235,    0,  236,  231,  233,  236,  237,  231,  233,  234,
      238,  261,  233,  239,  235,  241,  236,  234,  238,  234,
      237,  239,  235,  241,  236,  240,  262,  236,  237,    0,
      266,  243,  238,  240,  240,  239,    0,  241,  242,  243,
      238,    0,  242,  239,  243,  241,  242,  240,  262,  245,

      244,  245,  266,  243,  244,  240,  240,  245,  244,  247,
      242,  243,  246,  247,  242,    0,  243,  247,  242,  249,
      246,  245,  244,  245,  268,  246,  244,  249,  248,  245,
      244,  247,  250,    0,  246,  247,  248,  251,  248,  247,
      250,  249,  246,  250,  252,  251,  268,  246,  253,  249,
      248,  271,  252,  255,  250,  254,  253,  255,  248,  251,
      248,  255,  250,  254,  254,  250,  252,  251,  256,  272,
      253,  273,  278,  271,  252,  255,  256,  254,  253,  255,
      279,  281,    0,  255,  280,  254,  254,  282,  279,  281,
      256,  272,  280,  273,  278,  282,  283,  280,  256,  285,

      302,    0,  279,  281,  283,  284,  280,  285,  283,  282,
      279,  281,  284,  284,  280,  286,  287,  282,  283,  280,
      303,  285,  302,  286,  287,  289,  283,  284,  288,  285,
      283,  290,  288,  289,  284,  284,  288,  286,  287,  290,
      291,  292,  303,    0,  290,  286,  287,  289,  291,  292,
      288,  296,  293,  290,  288,  289,  293,  294,  288,  296,
      293,  290,  291,  292,  297,  294,  290,  307,  295,  294,
      291,  292,  297,  296,  293,  295,  295,  298,  293,  294,
      299,  296,  293,  308,  319,  298,  297,  294,  299,  307,
      295,  294,  300,  310,  297,  313,  300,  295,  295,  298,

      300,  310,  299,  313,  311,  308,  319,  298,  321,    0,
      299,  311,  311,  312,  300,  310,  312,  313,  300,  314,
      315,  312,  300,  310,  316,  313,  311,  314,  315,  318,
      321,  316,  316,  311,  311,  312,  317,  318,  312,  317,
        0,  314,  315,  312,  317,  327,  316,  324,  323,  314,
      315,  318,  326,  316,  316,  324,  323,  325,  317,  318,
      326,  317,  323,  328,  333,  325,  317,  327,  329,  324,
      323,  325,  333,    0,  326,  330,  329,  324,  323,  325,
        0,  329,  326,  330,  323,  328,  333,  325,  330,    0,
      329,  334,    0,  325,  333,    0,    0,  330,  329,  334,

        0,    0,    0,  329,    0,  330,    0,    0,    0,    0,
      330,    0,    0,  334,    0,    0,    0,    0,    0,    0,
        0,  334,  336,  336,  336,  336,  340,    0,    0,  340,
      341,    0,    0,  341,  342,  342,  342,  342,  343,    0,
        0,  343,  344,    0,    0,  344,  345,    0,  345,  345,
      346,    0,  346,  346,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[62] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./CoolLexer.flex"
#line 2 "./CoolLexer.flex"

#include <iostream>
#include <fstream>
#include <cstdio>
#include <string>

#include "Parser.h"
#include "CoolLexer.h"

#undef YY_DECL
#define YY_DECL int CoolLexer::yylex()

#define ERROR -1

int comment_depth = 0;
int curline = 1;

#line 853 "CoolLexer.cpp"

#line 855 "CoolLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 39 "./CoolLexer.flex"


#line 992 "CoolLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 336 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 335 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "./CoolLexer.flex"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "./CoolLexer.flex"
{ Error("Wrong comment close-bracket"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "./CoolLexer.flex"
{ BEGIN(COMMENT); comment_depth = 0; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "./CoolLexer.flex"
{ ++comment_depth; }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 45 "./CoolLexer.flex"
{ Error("EOF in comment"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 46 "./CoolLexer.flex"
{ ++lineno; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 47 "./CoolLexer.flex"
{ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 48 "./CoolLexer.flex"
{
                      if (comment_depth == 0) BEGIN(INITIAL);
                      --comment_depth;
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "./CoolLexer.flex"
{ BEGIN(STRING); yymore(); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 54 "./CoolLexer.flex"
{ Error("Unexpected nl in string"); BEGIN(INITIAL); curline++; return ERROR; }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 55 "./CoolLexer.flex"
{ Error("EOF in string"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "./CoolLexer.flex"
{ BEGIN(INITIAL); Error("Unexpected null-term in string"); yymore(); return ERROR; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "./CoolLexer.flex"
{ yymore(); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "./CoolLexer.flex"
{ yymore(); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 59 "./CoolLexer.flex"
{ curline++; yymore(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "./CoolLexer.flex"
{ BEGIN(INITIAL); Escape(); return TOKEN_STRING; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 62 "./CoolLexer.flex"
return TOKEN_CLASS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 63 "./CoolLexer.flex"
return TOKEN_TRUE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 64 "./CoolLexer.flex"
return TOKEN_FALSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 65 "./CoolLexer.flex"
return TOKEN_ELSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 66 "./CoolLexer.flex"
return TOKEN_FI;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 67 "./CoolLexer.flex"
return TOKEN_IF;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 68 "./CoolLexer.flex"
return TOKEN_IN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 69 "./CoolLexer.flex"
return TOKEN_INHERITS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 70 "./CoolLexer.flex"
return TOKEN_ISVOID;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 71 "./CoolLexer.flex"
return TOKEN_LET;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 72 "./CoolLexer.flex"
return TOKEN_LOOP;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 73 "./CoolLexer.flex"
return TOKEN_POOL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 74 "./CoolLexer.flex"
return TOKEN_THEN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 75 "./CoolLexer.flex"
return TOKEN_WHILE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 76 "./CoolLexer.flex"
return TOKEN_CASE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 77 "./CoolLexer.flex"
return TOKEN_ESAC;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 78 "./CoolLexer.flex"
return TOKEN_NEW;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 79 "./CoolLexer.flex"
return TOKEN_OF;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 80 "./CoolLexer.flex"
return TOKEN_NOT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 82 "./CoolLexer.flex"
return TOKEN_INTCONST;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 83 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OBJECT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_TYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OTHER;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "./CoolLexer.flex"
return TOKEN_DOT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "./CoolLexer.flex"
return TOKEN_AT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "./CoolLexer.flex"
return TOKEN_TILDA;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 90 "./CoolLexer.flex"
return TOKEN_MUL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 91 "./CoolLexer.flex"
return TOKEN_DIV;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 92 "./CoolLexer.flex"
return TOKEN_PLUS;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 93 "./CoolLexer.flex"
return TOKEN_MINUS;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 94 "./CoolLexer.flex"
return TOKEN_LE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 95 "./CoolLexer.flex"
return TOKEN_ME;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 96 "./CoolLexer.flex"
return TOKEN_LESS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 97 "./CoolLexer.flex"
return TOKEN_EQ;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 98 "./CoolLexer.flex"
return TOKEN_ARROW;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 100 "./CoolLexer.flex"
return TOKEN_SQUARE_PARENTESES_LEFT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 101 "./CoolLexer.flex"
return TOKEN_SQUARE_PARENTESES_RIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 102 "./CoolLexer.flex"
return TOKEN_CURVE_PARENTESES_LEFT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 103 "./CoolLexer.flex"
return TOKEN_CURVE_PARENTESES_RIGHT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 104 "./CoolLexer.flex"
return TOKEN_ROUND_PARENTESES_LEFT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 105 "./CoolLexer.flex"
return TOKEN_ROUND_PARENTESES_RIGHT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "./CoolLexer.flex"
return TOKEN_SEMICOLON;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "./CoolLexer.flex"
return TOKEN_COLON;
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 110 "./CoolLexer.flex"
lineno++;
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 111 "./CoolLexer.flex"
{ }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "./CoolLexer.flex"
{ Error("Unrecognized charachter"); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "./CoolLexer.flex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1382 "CoolLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 62);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 336 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 62;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 336 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 335);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 114 "./CoolLexer.flex"


void CoolLexer::Error(const char* msg) const
{
    std::cerr << "Lexer error (line " << lineno + 1 << "): " << msg << ": lexeme '" << YYText() << "'\n";
    // std::exit(YY_EXIT_FAILURE);
}

void CoolLexer::Escape() const {
    const char *input = yytext;
    char *output = yytext;
    input++; // Skip opening '\"'
    while (*(input + 1) /* Skip closing '\"' */ ) {
        if (*input == '\\') {
            input++; // Skip '\\'
            switch (*input) {
                case 'n': *output++ = '\n'; break;
                case 't': *output++ = '\t'; break;
                case 'f': *output++ = '\f'; break;
                case 'b': *output++ = '\b'; break;
                default: *output++ = *input;
            }
        } else {
            *output++ = *input;
        }
        input++;
    }
    *output = '\0';
}

